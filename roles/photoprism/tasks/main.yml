- import_role:
    name: 'debops.debops.secret'

- name: Install required packages
  package:
    name: '{{ q("flattened", (photoprism__base_packages
                              + photoprism__packages)) }}'
    state: 'present'
  register: photoprism__register_packages
  until: photoprism__register_packages is succeeded

- name: Create Photoprism system group
  group:
    name: '{{ photoprism__group }}'
    state: 'present'
    system: True

- name: Create Photoprism system user
  user:
    name: '{{ photoprism__user }}'
    group: '{{ photoprism__group }}'
    home: '{{ photoprism__home }}'
    shell: '{{ photoprism__shell }}'
    state: 'present'
    system: True

- name: Create photoprism install directory
  file:
    path: "{{ photoprism__install_dir }}"
    state: directory
    owner: "{{ photoprism__user }}"
    group: "{{ photoprism__group }}"
    recurse: true

- name: Determine AVX extensions
  command: grep -o -m1 'avx[^ ]*' /proc/cpuinfo
  register: cpuinfo

- name: List supported AVX extensions
  set_fact:
    avx: "{{ cpuinfo.stdout | split('\n') | list }}"

- name: Determine tensorflow url
  set_fact:
    tensorflow_url: |
      {% if 'avx2' in avx %}
      https://dl.photoprism.org/tensorflow/linux/libtensorflow-linux-avx2-{{ photoprism__tensorflow_version }}.tar.gz
      {% elif 'avx' in avx %}
      https://dl.photoprism.org/tensorflow/linux/libtensorflow-linux-avx-{{ photoprism__tensorflow_version }}.tar.gz
      {% else %}
      https://dl.photoprism.org/tensorflow/linux/libtensorflow-linux-cpu-{{ photoprism__tensorflow_version }}.tar.gz
      {% endif %}

- name: Download and Extract tensorflow archive
  unarchive:
    src: "{{ tensorflow_url }}"
    remote_src: yes
    # TODO: Ideally we would unpack this into /opt/tensorflow but still have the
    # go compilation find it.
    dest: /usr/local
  register: install_tensorflow

- name: Run ldconfig
  command: ldconfig
  when: install_tensorflow.changed

- name: Run debops golang role
  import_role:
    name: debops.debops.golang
  vars:
    golang__dependent_packages:
      - '{{ photoprism__golang_dependent_packages }}'
    golang__src:
      - '{{ photoprism__golang_src }}'

- name: Copy the photoprism assets folder
  ansible.builtin.copy:
    src: "/var/local/_golang/go/src/github.com/photoprism/photoprism/assets"
    dest: "/opt/photoprism/assets"
    remote_src: yes

- name: Create Photoprism database
  mysql_db:
    name: '{{ photoprism__database_name }}'
    state: 'present'
  delegate_to: '{{ ansible_local.mariadb.delegate_to }}'
  register: photoprism__register_database_status
  tags: [ 'role::photoprism:database' ]

- name: Get photoprism UID
  getent:
    database: passwd
    key: "{{ photoprism__user }}"

# Install Photoprism
# This should be good for cribbing off: https://github.com/tteck/Proxmox/blob/main/setup/photoprism-install.sh

# Lots of apt packages
# cp /scripts/heif-convert.sh /usr/local/bin/heif-convert

